{"version":3,"sources":["webpack:///./src/components/contact-form/contact-form.js","webpack:///./src/pages/contacts.js","webpack:///./src/components/seo/seo.js","webpack:///./src/components/contacts/contacts.js"],"names":["ValidationContactForm","withFormik","mapPropsToValues","_ref2","email","name","message","handleSubmit","values","_ref3","data","setError","setSubmitting","setFieldTouched","fetch","method","headers","Content-Type","body","Object","assign","form-name","keys","map","key","encodeURIComponent","join","then","navigate","catch","validationSchema","Yup","shape","min","required","_ref","errors","isSubmitting","touched","nameRef","useRef","emailRef","messageRef","buttonRef","myTween","TimelineLite","paused","_useState","useState","isFilledName","setFillName","_useState2","isFilledEmail","setFillEmail","_useState3","isFilledMessage","setFillMessage","useEffect","length","inputName","current","querySelector","to","opacity","scaleX","transformOrigin","y","play","eventCallback","focus","react_default","a","createElement","formik_esm","className","action","data-netlify","type","value","hidden","ref","id","htmlFor","component","pattern","inputMode","disabled","ContactsPage","Fragment","seo","description","title","contacts","child","contact_form_contact_form","SEO","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gsap__WEBPACK_IMPORTED_MODULE_2__","Contacts","titleRef","timeLine"],"mappings":"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","file":"component---src-pages-contacts-js-9049711df9a372a59ff7.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\"\r\nimport * as Yup from \"yup\"\r\nimport { navigate } from \"gatsby\"\r\n\r\nimport \"./contact-form.css\"\r\n\r\n\r\nimport { TimelineLite } from \"gsap\"\r\n\r\nconst ERROR = `Something went wrong, check filled data`\r\n\r\nconst encode = (data) => {\r\n  return Object.keys(data)\r\n    .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\r\n    .join(\"&\")\r\n}\r\nconst ContactForm = ({ values, errors, isSubmitting, touched }) => {\r\n  let nameRef = useRef(null)\r\n  let emailRef = useRef(null)\r\n  let messageRef = useRef(null)\r\n  let buttonRef = useRef(null)\r\n  const myTween = new TimelineLite({ paused: true })\r\n  const [isFilledName, setFillName] = useState(false)\r\n  const [isFilledEmail, setFillEmail] = useState(false)\r\n  const [isFilledMessage, setFillMessage] = useState(false)\r\n\r\n  useEffect(() => {\r\n    values.name.length ? setFillName(true) : setFillName(false)\r\n    values.email.length ? setFillEmail(true) : setFillEmail(false)\r\n    values.message.length ? setFillMessage(true) : setFillMessage(false)\r\n  }, [values.name, values.email, values.message])\r\n\r\n  useEffect(() => {\r\n    const inputName = nameRef.current.querySelector(`input`);\r\n    myTween\r\n      .to(nameRef.current, .25, { opacity: 1, scaleX: 1, transformOrigin: \"0 0\" }, \"+=0.25\")\r\n      .to(emailRef.current, .25, { opacity: 1, scaleX: 1, transformOrigin: \"0 0\" }, \"-=0.065\")\r\n      .to(messageRef.current, .25, { opacity: 1, scaleX: 1, transformOrigin: \"0 0\" }, \"-=0.1\")\r\n      .to(buttonRef.current, .25, { opacity: 1, y: 0 })\r\n      .play()\r\n      .eventCallback(`onComplete`, () => inputName.focus())\r\n  }, [])\r\n\r\n  return (\r\n    <Form className=\"contact-form\"\r\n          action={`/success-sent/`}\r\n          name=\"contact\"\r\n          method=\"POST\"\r\n          data-netlify=\"true\">\r\n      <input type=\"hidden\" name=\"form-name\" value=\"contact\"/>\r\n      <p hidden><label>Donâ€™t fill this out: <input name=\"bot-field\"/></label></p>\r\n\r\n      <div className=\"contact-form__body\">\r\n        <div className=\"contact-form__fields\">\r\n          <div\r\n            className={`form-control scale-to-right ${isFilledName ? `filled` : ``} ${errors.name && touched.name ? `error` : ``}`}\r\n            ref={nameRef}>\r\n            <Field className={`form-control__field`} name=\"name\" id=\"contacts-name\"/>\r\n            <label className=\"form-control__label\" htmlFor=\"contacts-name\">Name</label>\r\n            <ErrorMessage className=\"form-control__error\" component=\"span\" name=\"name\"/>\r\n          </div>\r\n          <div\r\n            className={`form-control scale-to-right ${isFilledEmail ? `filled` : ``} ${errors.email && touched.email ? `error` : ``}`}\r\n            ref={emailRef}>\r\n            <Field type=\"email\" className={`form-control__field`} name=\"email\" id=\"contacts-email\"\r\n                   pattern={`[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$`} inputMode=\"email\"/>\r\n            <label className=\"form-control__label\" htmlFor=\"contacts-email\">E-mail</label>\r\n            <ErrorMessage className=\"form-control__error\" component=\"span\" name=\"email\"/>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`form-control scale-to-right ${isFilledMessage ? `filled` : ``} ${errors.message && touched.message ? `error` : ``}`}\r\n          ref={messageRef}>\r\n          <Field className={`form-control__field`} name=\"message\" id=\"contacts-message\"/>\r\n          <label className=\"form-control__label\" htmlFor=\"contacts-message\">What I need to know?</label>\r\n        </div>\r\n      </div>\r\n      <button\r\n        ref={buttonRef}\r\n        className={`contact-form__submit button slide-down ${isSubmitting && `button--disabled`}`}\r\n        disabled={isSubmitting}\r\n        type=\"submit\">{isSubmitting ? `Sending...` : `Get in touch`}</button>\r\n    </Form>\r\n  )\r\n}\r\nconst ValidationContactForm = withFormik({\r\n  mapPropsToValues({ email, name, message }) {\r\n    return {\r\n      email: email || ``,\r\n      name: name || ``,\r\n      message: message || ``,\r\n    }\r\n  },\r\n  handleSubmit(values, { setError, setSubmitting, setFieldTouched }) {\r\n    setSubmitting(true)\r\n    setFieldTouched()\r\n    fetch(\"/\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: encode({ \"form-name\": \"contact\", ...values }),\r\n    })\r\n      .then(() => {\r\n        setSubmitting(false)\r\n        navigate(\"/success-sent/\")\r\n      })\r\n      .catch(() => {\r\n        setSubmitting(false)\r\n        setError(ERROR)\r\n      })\r\n  },\r\n  validationSchema: Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(3, `Name must be at least 3 characters`)\r\n      .required(`Name is a required field`),\r\n    email: Yup.string()\r\n      .email(`Please enter a valid email address`)\r\n      .required(`Email is a required field`),\r\n  }),\r\n})(ContactForm)\r\n\r\nexport default ValidationContactForm\r\n","import React from \"react\";\r\n\r\nimport SEO from \"../components/seo/seo\";\r\nimport Contacts from \"../components/contacts/contacts\";\r\nimport ContactForm from \"../components/contact-form/contact-form\"\r\n\r\nconst ContactsPage = () => (\r\n  <>\r\n    <SEO description={`Portfolio`} title=\"Contact\"/>\r\n    <Contacts child={<ContactForm />}/>\r\n  </>\r\n);\r\n\r\nexport default ContactsPage;\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const metaDescription = description || site.siteMetadata.description;\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO;\r\n","import React, { useEffect, useRef } from \"react\"\r\n\r\nimport \"./contacts.css\"\r\nimport { TimelineLite } from \"gsap\"\r\n\r\nconst Contacts = ({ child }) => {\r\n  const titleRef = useRef(null);\r\n  const timeLine = new TimelineLite({paused: true})\r\n  useEffect(() => {\r\n    timeLine\r\n      .to(titleRef.current, 0.25, {opacity: 1, y: 0})\r\n      .play()\r\n  })\r\n  return (\r\n    <section className=\"contacts\">\r\n      <h1 ref={titleRef} className=\"h1 contacts__title slide-down\">Want to work with me?</h1>\r\n      {child}\r\n    </section>\r\n  )\r\n}\r\nexport default Contacts\r\n"],"sourceRoot":""}